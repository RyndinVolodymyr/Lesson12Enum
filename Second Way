import UIKit

// 1. Создать энум с шахматными фигруами (король, ферзь и т.д.). Каждая фигура должна иметь цвет белый либо черный (надеюсь намек понят), а так же букву и цифру для позиции. Создайте пару фигур с расположением на доске, так, чтобы черному королю был мат :) Поместите эти фигуры в массив фигур

indirect enum Chess {
    case King(color: Color, position: (x: Int, y: String), name: ChessName)
    case Queen(color: Color, position: (x: Int, y: String), name: ChessName)
    case Bishop(color: Color, position: (x: Int, y: String), name: ChessName)
    case Knight(color: Color, position: (x: Int, y: String), name: ChessName)
    case Rook(color: Color, position: (x: Int, y: String), name: ChessName)
    case Pawn(color: Color, position: (x: Int, y: String), name: ChessName)
}

enum Color {
    case White
    case Black
}

enum ChessName: String {
    case King = "King"
    case Queen = "Queen"
    case Bishop = "Bishop"
    case Knight = "Knight"
    case Rook = "Rook"
    case Pawn = "Pawn"
}

var whiteRook = Chess.Rook(color: .White, position: (x: 8, y: "H"), name: .Rook)
var whiteKing = Chess.King(color: .White, position: (x: 2, y: "A"), name: .King)
var whiteQueen = Chess.Queen(color: .White, position: (x: 1, y: "B"), name: .Queen)
var whiteBishop = Chess.Bishop(color: .White, position: (x: 3, y: "C"), name: .Bishop)
var blackKing = Chess.King(color: .Black, position: (x: 4, y: "D"), name: .King)

var arrayOfChessPiece = [whiteKing, whiteQueen, whiteBishop, blackKing, whiteRook]

//  2. Сделайте так, чтобы энумовские значения имели rawValue типа String. Каждому типу фигуры установите соответствующее английское название. Создайте функцию, которая выводит в консоль (текстово, без юникода) название фигуры, цвет и расположение. Используя эту функцию распечатайте все фигуры в массиве.

func chessInfo(array: [Chess]) -> () {
    for i in array {
        switch i {
        case .King(let color, (let  x, let y), let name):
            print("\(color) \(name) position \(x)\(y)")
        case .Queen(let color, (let  x, let y), let name):
            print("\(color) \(name) position \(x)\(y)")
        case .Bishop(let color, (let  x, let y), let name):
            print("\(color) \(name) position \(x)\(y)")
        case .Knight(let color, (let  x, let y), let name):
            print("\(color) \(name) position \(x)\(y)")
        case .Rook(let color, (let  x, let y), let name):
            print("\(color) \(name) position \(x)\(y)")
        case .Pawn(let color, (let  x, let y), let name):
            print("\(color) \(name) position \(x)\(y)")
        }
    }
}

chessInfo(array: arrayOfChessPiece)

// 3. Используя красивые юникодовые представления шахматных фигур, выведите в консоли вашу доску. Если клетка не содержит фигуры, то используйте белую или черную клетку. Это должна быть отдельная функция, которая распечатывает доску с фигурами (принимает массив фигур и ничего не возвращает)

var blackKingPiece = "\u{265A}"
var whiteKingPiece = "\u{2654}"
var blackQueenPiece = "\u{265B}"
var whiteQueenPiece = "\u{2655}"
var blackBishopPiece = "\u{265D}"
var whiteBishopPiece = "\u{2657}"
var blackKnightPiece = "\u{2658}"
var whiteKnightPiece = "\u{265E}"
var blackRookPiece = "\u{265C}"
var whiteRookPiece = "\u{2656}"
var blackPawnPiece = "\u{265F}"
var whitePawnPiece = "\u{2659}"
var whiteCell = "\u{2B1C}"
var blackCell = "\u{2B1B}"

func unicodePiece(_ chess: Chess) -> String {
        switch chess {
        case .King(let color, _, _): return color == .White ? whiteKingPiece : blackKingPiece
        case .Queen(let color, _, _): return color == .White ? whiteQueenPiece : blackKingPiece
        case .Bishop(let color, _, _): return color == .White ? whiteBishopPiece : blackBishopPiece
        case .Knight(let color, _, _): return color == .White ? whiteKnightPiece : blackKnightPiece
        case .Rook(let color, _, _): return color == .White ? whiteRookPiece : blackRookPiece
        case .Pawn(let color, _, _): return color == .White ? whitePawnPiece : blackPawnPiece
    }
}

func chessPosition(figures: Chess) -> (posX: Int, posY: String) {
        switch figures {
        case .King(_, (let  x, let y), _): return (x, y)
        case .Queen(_, (let  x, let y), _): return (x, y)
        case .Bishop(_, (let  x, let y), _): return (x, y)
        case .Knight(_, (let  x, let y), _): return (x, y)
        case .Rook(_, (let  x, let y), _): return (x, y)
        case .Pawn(_, (let  x, let y), _): return (x, y)
    }
}

func chessPrint(array: [Chess]) -> () {
    
    let chahr = ["A", "B", "C", "D", "E", "F", "G", "H"]

    for j in (1...8).reversed() {
        second: for (index, value) in chahr.enumerated() {
            for figure in array {
                let coordinates = chessPosition(figures: figure)
                if j == coordinates.posX && value == coordinates.posY {
                    print(unicodePiece(figure), terminator: "")
                    continue second
                }
            }
            print((index + 1) % 2 == j % 2 ? whiteCell : blackCell, terminator: "")
        }
        print()
    }
}

chessPrint(array: arrayOfChessPiece)
